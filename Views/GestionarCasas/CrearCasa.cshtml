@model ProyectoFinalPogragamacionVI.Models.Casas

@{
    bool esEdicion = Convert.ToBoolean(ViewBag.EsConsulta);
    ViewBag.Title = esEdicion ? "Modificar Casa" : "Crear Casa";
}

<h2>@ViewBag.Title</h2>

<form method="post" id="myform" class="form" action="@Url.Action(esEdicion ? "EditarCasa" : "CrearCasa", "GestionarCasas")">
    @Html.HiddenFor(_ => _.Id)

    @{
        var atributosNombre = new Dictionary<string, object>{
        { "placeholder", "Nombre de la casa" },
        { "class", "form-control" }
        };
        if (esEdicion)
        {
            atributosNombre.Add("readonly", "readonly");
        }
    }
    <div class="mb-3">
        <label class="form-label">Casa</label>
        @Html.TextBoxFor(_ => _.Nombre, atributosNombre)
        @Html.ValidationMessageFor(m => m.Nombre, "", new { @class = "text-danger" })
    </div>

    @{
        var atributosMetros = new Dictionary<string, object>
{
        { "class", "form-control" },
        { "type", "number" },
        { "placeholder", "0" }
    };
        if (esEdicion)
        {
            atributosMetros.Add("readonly", "readonly");
        }
    }
    <div class="mb-3">
        <label class="form-label">Metros cuadrados</label>
        @Html.TextBoxFor(_ => _.metros, atributosMetros)
    </div>


    <div class="mb-3">
        <label class="form-label">Número de habitaciones</label>
        @Html.TextBoxFor(_ => _.numHabitaciones, new
        {
            @class = "form-control",
            placeholder = "0",
            type = "number",
        })
    </div>

    <div class="mb-3">
        <label class="form-label">Número de baños</label>
        @Html.TextBoxFor(m => m.numBanos, new
        {
            @class = "form-control",
            placeholder = "0",
            type = "number",
        })
    </div>

    <div class="mb-3">
        <label class="form-label">Cliente</label>
        <select id="idCliente" name="idCliente" class="form-control" @(esEdicion ? "disabled" : "")>
            <option value="">Seleccione un cliente</option>
        </select>
        @* Campo oculto para que el valor de cliente se envíe aunque el select esté deshabilitado *@
        @if (esEdicion)
        {
            @Html.HiddenFor(_ => _.idCliente)
        }
    </div>

    @{
        var atributosFecha = new Dictionary<string, object>
{
        { "class", "form-control" },
        { "type", "date" }
    };
        if (esEdicion)
        {
            atributosFecha.Add("readonly", "readonly");
        }
    }
    <div class="mb-3">
        <label class="form-label">Fecha construcción</label>
        @Html.TextBox("FechaConstruccion", Model.FechaConstruccion.ToString("yyyy-MM-dd"), atributosFecha)
    </div>


    <div>
        <input type="submit" value="@(esEdicion ? "Guardar" : "Guardar")" class="btn btn-primary" />
        <a href="~/GestionarCasas/Index" class="btn btn-dark">Regresar</a>
    </div>
</form>
@* Boton de inactivar casa *@
@if (esEdicion)
{
    <br />
    using (Html.BeginForm("InactivarCasa", "GestionarCasas", FormMethod.Post))
    {
        @Html.HiddenFor(m => m.Id)
        <button type="submit" class="btn btn-danger">Inactivar</button>
    }
}

@if (ViewBag.mensaje != null)
{
    <br />
    <div class="alert alert-info" role="alert">
        @ViewBag.mensaje
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/validacionesGenericas.js"></script>
    <script type="text/javascript">

        // Reglas de validación personalizadas
        $("#myform").validate({
            rules: {
                'Nombre': {
                    required: true,
                    maxlength: 50,
                    pattern: /^[a-zA-Z0-9\s]+$/
                },
                'metros': {
                    required: true,
                    number: true,
                    min: 0.01,
                    step: 0.01
                },
                'numHabitaciones': {
                    required: true,
                    digits: true,
                    min: 1,
                    max: 8
                },
                'numBanos': {
                    required: true,
                    digits: true,
                    min: 1,
                    max: 4
                },
                'FechaConstruccion': {
                    required: true,
                    date: true
                },
                'idCliente': {
                    required: true
                }
            },
            messages: {
                'Nombre': {
                    required: "El nombre es obligatorio",
                    maxlength: "Máximo 50 caracteres",
                    pattern: "Solo se permiten letras, números y espacios"
                },
                'metros': {
                    required: "Los metros cuadrados son obligatorios",
                    number: "Debe ser un número válido",
                    min: "Debe ser mayor a 0",
                    step: "Máximo dos decimales"
                },
                'numHabitaciones': {
                    required: "El número de habitaciones es obligatorio",
                    digits: "Debe ser un número entero",
                    min: "Debe ser al menos 1",
                    max: "No puede ser mayor a 8"
                },
                'numBanos': {
                    required: "El número de baños es obligatorio",
                    digits: "Debe ser un número entero",
                    min: "Debe ser al menos 1",
                    max: "No puede ser mayor a 4"
                },
                'FechaConstruccion': {
                    required: "La fecha de construcción es obligatoria",
                    date: "Debe ser una fecha válida"
                },
                'idCliente': {
                    required: "Debe seleccionar un cliente"
                }
            }
        });

        // Función para cargar clientes al dropdown
        function cargarClientes(selectedId) {
            $.get("/GestionarCasas/ObtenerClientesActivos", function (data) {
                let ddl = $("#idCliente");
                ddl.empty().append("<option value=''>Seleccione una opción</option>");
                $.each(data, function (i, item) {
                    let option = new Option(item.Nombre, item.Id);
                    if (item.Id == selectedId) {
                        option.selected = true;
                    }
                    ddl.append(option);
                });
            });
        }
        $(document).ready(function () {
            cargarClientes(@Model.idCliente);
        });
    </script>
}

